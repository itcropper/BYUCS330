#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 9296 0 26 3 10 #"#lang plai"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;-----------------------  TEMPLATE   ----------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 22 3 1 #" "
0 0 14 3 4 #"Expr"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 3 #"num"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 2 #"id"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 4 #"bool"
0 0 22 3 2 #" ("
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 10 #"bin-num-op"
0 0 22 3 2 #" ("
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 10 #"procedure?"
0 0 22 3 3 #") ("
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 4 #"test"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"then"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 3 #") ("
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 8 #"rec-with"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 3 #") ("
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 6 #"arg-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 8 #"fun-expr"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 8 #"arg-expr"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 6 #"tempty"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 8 #"istempty"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 22 3 1 #" "
0 0 14 3 4 #"Type"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"t-num"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 6 #"t-bool"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"elem"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 3 #") ("
0 0 14 3 6 #"result"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"t-var"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 22 3 1 #" "
0 0 14 3 10 #"Constraint"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";;-------------------  TEMPLATE  -----------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;---------------------SUPPORT CODE-------------------------"
0 0 22 29 1 #"\n"
0 0 17 3 46 #"; type=?/mapping : hash hash Type Type -> Bool"
0 0 22 29 1 #"\n"
0 0 17 3 47 #"; determines if types are equal modulo renaming"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"type=?/mapping"
0 0 22 3 1 #" "
0 0 14 3 3 #"ht1"
0 0 22 3 1 #" "
0 0 14 3 3 #"ht2"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"teq?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 14 #"type=?/mapping"
0 0 22 3 1 #" "
0 0 14 3 3 #"ht1"
0 0 22 3 1 #" "
0 0 14 3 3 #"ht2"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-num?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-num?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 3 #")) "
0 0 14 3 4 #"true"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-bool?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 7 #"t-bool?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 3 #")) "
0 0 14 3 4 #"true"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-list?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 7 #"t-list?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 4 #"teq?"
0 0 22 3 2 #" ("
0 0 14 3 11 #"t-list-elem"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 11 #"t-list-elem"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-fun?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-fun?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 4 #"teq?"
0 0 22 3 2 #" ("
0 0 14 3 9 #"t-fun-arg"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 9 #"t-fun-arg"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"teq?"
0 0 22 3 2 #" ("
0 0 14 3 12 #"t-fun-result"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 12 #"t-fun-result"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-var?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-var?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 5 #"local"
0 0 22 3 3 #" (["
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"v1"
0 0 22 3 1 #" "
0 0 17 3 42 #"; the symbol that ht1 says that t1 maps to"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 8 #"hash-ref"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 14 3 3 #"ht1"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 17 3 47 #"; if t1 doesn't map to anything, it's the first"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 17 3 39 #"; time we're seeing it, so map it to t2"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 3 #"ht1"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 8 #"hash-ref"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 14 3 3 #"ht2"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 3 #"ht2"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 3 #") ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 5 #")))])"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 60
#"; we have to check both mappings, so that distinct variables"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 60
#"; are kept distinct. i.e. a -> b should not be isomorphic to"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 50 #"; c -> c under the one-way mapping a => c, b => c."
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 2 #") "
0 0 14 3 2 #"v1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 8 #"symbol=?"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 2 #") "
0 0 14 3 2 #"v2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 5 #"Type?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"Type?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 3 #")) "
0 0 14 3 5 #"false"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"type=?"
0 0 22 3 1 #" "
0 0 19 3 31 #"\"either ~a or ~a is not a Type\""
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 29 #"; type=? Type -> Type -> Bool"
0 0 22 29 1 #"\n"
0 0 17 3 56 #"; signals an error if arguments are not variants of Type"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 3 #" (("
0 0 14 3 6 #"type=?"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 2 #") "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 14 #"type=?/mapping"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 22 3 3 #") ("
0 0 14 3 9 #"make-hash"
0 0 22 3 2 #") "
0 0 14 3 2 #"t1"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 47 #"; Unfortunately, test/pred simply prints false;"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 32 #"; this helps us see what t2 was."
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"type=?"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 19 3 43 #"\"~s and ~a are not equal (modulo renaming)\""
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 14 3 2 #"t1"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 64
#"; constraint-list=? : Constraint list -> Constraint list -> Bool"
0 0 22 29 1 #"\n"
0 0 17 3 62
#"; signals an error if arguments are not variants of Constraint"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 3 #" (("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lc1"
0 0 22 3 2 #") "
0 0 14 3 3 #"lc2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 5 #"htlc1"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 5 #"htlc2"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 6 #"andmap"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 3 #"and"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 14 #"type=?/mapping"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 14 3 5 #"htlc1"
0 0 22 3 1 #" "
0 0 14 3 5 #"htlc2"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 7 #"eqc-lhs"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 3 #") ("
0 0 14 3 7 #"eqc-lhs"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 14 #"type=?/mapping"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 14 3 5 #"htlc1"
0 0 22 3 1 #" "
0 0 14 3 5 #"htlc2"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 7 #"eqc-rhs"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 3 #") ("
0 0 14 3 7 #"eqc-rhs"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 14 3 3 #"lc1"
0 0 22 3 1 #" "
0 0 14 3 3 #"lc2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"constraint-list=?"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 19 3 43 #"\"~s and ~a are not equal (modulo renaming)\""
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 14 3 3 #"lc1"
0 0 22 3 1 #" "
0 0 14 3 3 #"lc2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;-----------------------/SUPPORT CODE----------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;----------------------   PARSER  -------------------------"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";;CONTRACT (parse se) \342\206\222 Expr?"
0 0 22 29 1 #"\n"
0 0 17 3 19 #";se : s-expression?"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";;PURPOSE Parses expressions from the grammar."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";;DEFINITION"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"bad-list"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"t-bool"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 20 3 1 #"'"
0 0 14 3 6 #"t-list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"t-num"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"t-fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"app"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 20 3 1 #"'"
0 0 14 3 4 #"with"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tempty"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bif"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 20 3 1 #"'"
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tfirst"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 20 3 1 #"'"
0 0 14 3 5 #"trest"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 20 3 1 #"'"
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"istempty"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"tempty?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #":"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 20 3 1 #"'"
0 0 14 3 2 #"\\;"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tempty"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        ))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"op-table"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"-"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        )"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"lookup-op"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 1 #"("
0 0 14 3 5 #"assoc"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 8 #"op-table"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 6 #"second"
0 0 22 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 8 #"op-table"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 7 #";number"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 3 #";id"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"member"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #" "
0 0 14 3 8 #"bad-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 9 #"lookup-op"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 8 #";boolean"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #")] "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 7 #";nempty"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tempty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 6 #"tempty"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 5 #"list?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 7 #";iszero"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 6 #"iszero"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 5 #";with"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"with"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 5 #"list?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"member"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 14 3 8 #"bad-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 20 3 1 #"2"
0 0 22 3 10 #"))        "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 3 #"rec"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 5 #"list?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"member"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 14 3 8 #"bad-list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 8 #"rec-with"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 5 #";;bif"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bif"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"4"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 4 #";fun"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 5 #"list?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"member"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 14 3 8 #"bad-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 3 #"fun"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 6 #";ncons"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 5 #"tcons"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 7 #";nempty"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 7 #"tempty?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 8 #"istempty"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 7 #";nfirst"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tfirst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 6 #";nrest"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 5 #"trest"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"id?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"id"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 4 #";app"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 6 #";binop"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"               [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 9 #"lookup-op"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"member"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 14 3 8 #"bad-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 2 #" ("
0 0 14 3 9 #"lookup-op"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               )"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       )"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    )"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;TESTS---------------------------"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";------------------ random ---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #") "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 2 #") "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 2 #") "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 2 #")("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 14 3 4 #"add1"
0 0 22 3 2 #") "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";-----------------ids---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 3 #") ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 3 #"'#t"
0 0 22 3 1 #")"
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"app"
0 0 22 3 2 #") "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"with"
0 0 22 3 2 #") "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 4 #"))) "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";------------------tempty---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";------------------binumops---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #"))("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #")) ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #"))("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #"))("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #")) ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #"))("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";------------------iszero---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #")) ("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 5 #"))) ("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #"))("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";------------------bif's---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 3 #"  ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";------------------with---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #") "
0 0 14 3 1 #"x"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"with"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 4 #") ))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";------------------ rec-with ---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 15 3 3 #"rec"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"len"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 7 #"tempty?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                    "
0 0 20 3 1 #"0"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 3 #"len"
0 0 22 3 2 #" ("
0 0 14 3 5 #"trest"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 3 #"len"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                 "
0 0 14 3 6 #"tempty"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 8 #"rec-with"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"len"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 8 #"istempty"
0 0 22 3 2 #" ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ("
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"len"
0 0 22 3 3 #") ("
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"len"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                              ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 14 3 6 #"tempty"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";------------------fun---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"4"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 5 #"))) ("
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")) "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 5 #") )) "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";------------------ app ---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #"))("
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")) "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 5 #"))) ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")) "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";------------------tempty---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tempty"
0 0 22 3 2 #")("
0 0 14 3 6 #"tempty"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";------------------ tcons ---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #"))("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 3 #"))("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #") ("
0 0 14 3 6 #"tempty"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #") ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #") ("
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")) "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";------------------ tfirst ---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"tfirst"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #"))("
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 4 #")))("
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"tfirst"
0 0 22 3 3 #")) "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";------------------ trest ---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"trest"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #"))("
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"trest"
0 0 22 3 3 #")) "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";------------------ tempty ---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 7 #"tempty?"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 4 #")) ("
0 0 14 3 8 #"istempty"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 7 #"tempty?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"istempty"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 7 #"tempty?"
0 0 22 3 3 #")) "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-------------------  /PARSER  -----------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-----------------   Alpha Very ----------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"mtenv"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"idenv"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 6 #"new-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"more"
0 0 22 3 1 #" "
0 0 14 3 4 #"Env?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 22 3 1 #" "
0 0 14 3 8 #"ConstEnv"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 10 #"mtConstEnv"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 9 #"aConstEnv"
0 0 22 3 2 #" ("
0 0 14 3 1 #"c"
0 0 22 3 1 #" "
0 0 14 3 11 #"Constraint?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 4 #"more"
0 0 22 3 1 #" "
0 0 14 3 9 #"ConstEnv?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"check-env"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"mtenv"
0 0 22 3 4 #" () "
0 0 20 3 2 #"#f"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"idenv"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 1 #" "
0 0 14 3 4 #"more"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 14 3 6 #"new-id"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 9 #"check-env"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 4 #"more"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";;CONTRACT (alpha-vary e) \342\206\222 Expr?"
0 0 22 29 1 #"\n"
0 0 17 3 10 #";e : Expr?"
0 0 22 29 1 #"\n"
0 0 17 3 69
(
 #";;PURPOSE Renames all the identifiers in e to new unique identifier,"
 #" "
) 0 0 22 29 1 #"\n"
0 0 17 3 51 #";such that the same identifier is never used twice."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";;DEFINITION"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 2 #" ("
0 0 14 3 5 #"mtenv"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"Expr"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"num"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 14 3 1 #"e"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 2 #"id"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 2 #" ("
0 0 14 3 9 #"check-env"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"alpha-vary"
0 0 22 3 1 #" "
0 0 19 3 12 #"\"Unbound-Id\""
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"bool"
0 0 22 3 2 #" ("
0 0 14 3 1 #"b"
0 0 22 3 2 #") "
0 0 14 3 1 #"e"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"bin-num-op"
0 0 22 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"z"
0 0 22 3 2 #")("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 3 #"con"
0 0 22 3 1 #" "
0 0 14 3 3 #"ift"
0 0 22 3 1 #" "
0 0 14 3 3 #"iff"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 3 #"con"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 3 #"ift"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 3 #"iff"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 22 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 22 3 2 #" ("
0 0 14 3 5 #"idenv"
0 0 22 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"with"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"rec-with"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 22 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 22 3 2 #" ("
0 0 14 3 5 #"idenv"
0 0 22 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 8 #"rec-with"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 6 #"arg-id"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 22 3 1 #" "
0 0 14 3 6 #"arg-id"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 22 3 2 #" ("
0 0 14 3 5 #"idenv"
0 0 22 3 1 #" "
0 0 14 3 6 #"arg-id"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 14 3 6 #"new-id"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 8 #"fun-expr"
0 0 22 3 1 #" "
0 0 14 3 8 #"arg-expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 8 #"arg-expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"tempty"
0 0 22 3 4 #" () "
0 0 14 3 1 #"e"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"rest"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"istempty"
0 0 22 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 8 #"istempty"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vary"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    ))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";;TESTS--------------------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 2 #"'4"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 22 3 3 #")) "
0 0 19 3 12 #"\"Unbound-Id\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 3 #"))("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")))("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")))("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")))("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")))("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #") "
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #") "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 20 #"\"should look like\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"with"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"x424546"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"x424546"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"with"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"x424547"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #") ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"x424547"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";;/TESTS-------------------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";(alpha-very (parse '(+ (with (x 4) x) (with (x 5) x))))"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";--> (bin-num-op #<procedure:+> "
0 0 22 29 1 #"\n"
0 0 17 3 53 #";(with 'x (num 4) (id 'x)) (with 'x (num 5) (id 'x)))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";(parse '(+ (with (x1 4) x1) (with (x2 5) x2)))"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";-->(bin-num-op #<procedure:+> "
0 0 22 29 1 #"\n"
0 0 17 3 57 #";(with 'x1 (num 4) (id 'x1)) (with 'x2 (num 5) (id 'x2)))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 49 #";(alpha-vary (parse '(with (x 5) y))) --> \"error\""
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-----------------   /Alpha Very ---------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-------------  generate-constrains ------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"id?"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"id-v"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"gensym"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 65
(
 #";;CONTRACT (generate-constraints e-id e) \342\206\222 (listof Constr"
 #"aint?)"
) 0 0 22 29 1 #"\n"
0 0 17 3 15 #";e-id : symbol?"
0 0 22 29 1 #"\n"
0 0 17 3 10 #";e : Expr?"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 61
#";;PURPOSE Returns the constraints generated by e. e-id serves"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";  as e\342\200\231s label in this list."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";;DEFINITION"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 2 #"gc"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 3 #") ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 22 3 1 #" "
0 0 14 3 10 #"Constraint"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 14 3 4 #"Expr"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"num"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 2 #"id"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 2 #") "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"bool"
0 0 22 3 2 #" ("
0 0 14 3 1 #"b"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"bin-num-op"
0 0 22 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"type-of-lhs"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"lhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"type-of-rhs"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"rhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 6 #"append"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 11 #"type-of-lhs"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 11 #"type-of-rhs"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 11 #"type-of-lhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 11 #"type-of-rhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 2 #"ex"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"type-of-ex"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 2 #"ex"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"iszero"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 10 #"type-of-ex"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 10 #"type-of-ex"
0 0 22 3 1 #" "
0 0 14 3 2 #"ex"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 4 #"test"
0 0 22 3 1 #" "
0 0 14 3 4 #"then"
0 0 22 3 1 #" "
0 0 14 3 4 #"else"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 4 #"test"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"bif-test"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-then"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 4 #"then"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"bif-then"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-else"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"bif-else"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-test"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-then"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-else"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-then"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-test"
0 0 22 3 1 #" "
0 0 14 3 4 #"test"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-then"
0 0 22 3 1 #" "
0 0 14 3 4 #"then"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-else"
0 0 22 3 1 #" "
0 0 14 3 4 #"else"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 18 #"type-of-bound-body"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"with-bbody"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-body"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"with-body"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-body"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 18 #"type-of-bound-body"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 18 #"type-of-bound-body"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-body"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"rec-with"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 18 #"type-of-bound-body"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"rec-with-bbody"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-body"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 13 #"rec-with-body"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-body"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 18 #"type-of-bound-body"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 18 #"type-of-bound-body"
0 0 22 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-body"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 6 #"arg-id"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-body"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"fun-body"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 6 #"arg-id"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-body"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-body"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 8 #"fun-expr"
0 0 22 3 1 #" "
0 0 14 3 8 #"arg-expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 16 #"type-of-fun-expr"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 12 #"app-fun-expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 16 #"type-of-arg-expr"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 8 #"arg-expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 12 #"app-arg-expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 16 #"type-of-fun-expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 16 #"type-of-arg-expr"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 16 #"type-of-fun-expr"
0 0 22 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 16 #"type-of-arg-expr"
0 0 22 3 1 #" "
0 0 14 3 8 #"arg-expr"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"tempty"
0 0 22 3 5 #" () ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tempty"
0 0 22 3 6 #")))))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 10 #"first-expr"
0 0 22 3 1 #" "
0 0 14 3 9 #"rest-expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"type-of-first"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 10 #"first-expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"tcons-first"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-rest"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 9 #"rest-expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"tcons-rest"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 13 #"type-of-first"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-rest"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 13 #"type-of-first"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 13 #"type-of-first"
0 0 22 3 1 #" "
0 0 14 3 10 #"first-expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-rest"
0 0 22 3 1 #" "
0 0 14 3 9 #"rest-expr"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-expr"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"tfirst-expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-list"
0 0 22 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"tfirst-list-type"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-expr"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-expr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-expr"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"trest-expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-list"
0 0 22 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"trest-list-type"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-expr"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-list"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-expr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"istempty"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-expr"
0 0 22 3 2 #" ("
0 0 14 3 7 #"gen-sym"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"tempty-expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-list"
0 0 22 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"tempty-list-type"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 6 #"append"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-expr"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 14 3 4 #"e-id"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-of-expr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    ))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";TESTS--------------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 2 #"gc"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 2 #"'0"
0 0 22 3 3 #"))("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 2 #"gc"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 2 #"gc"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 1 #"("
0 0 14 3 2 #"gc"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"start"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 2 #"gc"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"start"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"start"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 2 #"gc"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 2 #"gc"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"start"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 4 #"look"
0 0 19 3 8 #" like\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"start"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"left113305"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"right113306"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"left113305"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"right113306"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"print"
0 0 22 3 1 #" "
0 0 19 3 5 #"\"this"
0 0 19 3 3 #"\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 2 #"gc"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"start"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"print"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"start"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 12 #"iszero453700"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 12 #"iszero453700"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 19 #";testing for ISZERO"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"iszero1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"iszero1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";testing for APP"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")) "
0 0 20 3 1 #"3"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"app-fun1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"app-arg1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"app-fun1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"fun-body1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"fun-body1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"app-arg1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";testing for binumop"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"lhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"lhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";testing for bif"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"if1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"then1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"else1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"then1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"if1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"then1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"else1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";testing for  WITH"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"with-body1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"with-bbody1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"with-bbody1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"with-body1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";check for an expection with unbound id"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"k"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 12 #"\"Unbound-Id\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";testing for REC"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 15 3 3 #"rec"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"rec-with-body1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"rec-with-bbody1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"rec-with-bbody1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"rec-with-body1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";testing for tempty-should pass"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"tempty1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ["
0 0 14 3 3 #"num"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 2 #")]"
0 0 14 3 5 #"-done"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 2 #"id"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #")]"
0 0 14 3 5 #"-done"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 4 #"bool"
0 0 22 3 2 #" ("
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 14 3 5 #"-done"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 10 #"bin-num-op"
0 0 22 3 2 #" ("
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 10 #"procedure?"
0 0 22 3 3 #") ("
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 14 3 5 #"-done"
0 0 22 3 19 #"                   "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 14 3 5 #"-done"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 4 #"test"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"then"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 14 3 5 #"-done"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 3 #") ("
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 8 #"rec-with"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 3 #") ("
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 6 #"arg-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #")] "
0 0 14 3 2 #"--"
0 0 22 3 1 #" "
0 0 14 3 5 #"done?"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 8 #"fun-expr"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 8 #"arg-expr"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #")] "
0 0 14 3 2 #"--"
0 0 22 3 1 #" "
0 0 14 3 4 #"done"
0 0 22 3 18 #"                  "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 6 #"tempty"
0 0 22 3 2 #"] "
0 0 14 3 2 #"--"
0 0 22 3 1 #" "
0 0 14 3 5 #"done?"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #")] "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 8 #"istempty"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;;///////////////////////////////"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;;---------LIST STUFF -----------"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;;///////////////////////////////"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 19 #";;testing for tcons"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"list-first1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"list-rest1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"list-first1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"list-first1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"list-rest1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"tempty1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;testing for tfirst"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"tfirst"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"tfirst-list"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"tfirst-list-type1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"tfirst-list-type1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"tfirst-list"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";testing for tRest"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"trest"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"trest-expr"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"trest-list-type1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"trest-list-type1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"trest-expr"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";testing for tempty?"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"(("
0 0 14 3 17 #"constraint-list=?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 7 #"tempty?"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"tempty-exp"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"tempty-list-type"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"tempty-exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-------------  /generate-constrains -----------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-------------         Unify        ------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 22 3 1 #" "
0 0 14 3 12 #"complex-type"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"Type"
0 0 22 3 1 #" "
0 0 14 3 12 #"complex-type"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"t-num"
0 0 22 3 4 #" () "
0 0 20 3 2 #"#f"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"t-bool"
0 0 22 3 4 #" () "
0 0 20 3 2 #"#f"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"elem"
0 0 22 3 3 #") ("
0 0 14 3 9 #"contains?"
0 0 22 3 1 #" "
0 0 14 3 4 #"elem"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 22 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 22 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 9 #"contains?"
0 0 22 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"t-var"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 12 #"complex-type"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"replace"
0 0 22 3 1 #" "
0 0 14 3 3 #"old"
0 0 22 3 1 #" "
0 0 14 3 3 #"new"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 22 3 1 #" "
0 0 14 3 3 #"new"
0 0 22 3 1 #" "
0 0 14 3 3 #"old"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"unify"
0 0 22 3 1 #" "
0 0 19 3 27 #"\"Occurs check failed ~e ~e\""
0 0 22 3 1 #" "
0 0 14 3 3 #"old"
0 0 22 3 1 #" "
0 0 14 3 3 #"new"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"replace*"
0 0 22 3 1 #" "
0 0 14 3 3 #"old"
0 0 22 3 1 #" "
0 0 14 3 3 #"new"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"subs-help"
0 0 22 3 1 #" "
0 0 14 3 4 #"look"
0 0 22 3 1 #" "
0 0 14 3 4 #"swap"
0 0 22 3 1 #" "
0 0 14 3 5 #"const"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"Type"
0 0 22 3 1 #" "
0 0 14 3 5 #"const"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"t-num"
0 0 22 3 4 #" () "
0 0 14 3 5 #"const"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"t-bool"
0 0 22 3 5 #" ()  "
0 0 14 3 5 #"const"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"elem"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 9 #"subs-help"
0 0 22 3 1 #" "
0 0 14 3 4 #"look"
0 0 22 3 1 #" "
0 0 14 3 4 #"swap"
0 0 22 3 1 #" "
0 0 14 3 4 #"elem"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 22 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 9 #"subs-help"
0 0 22 3 1 #" "
0 0 14 3 4 #"look"
0 0 22 3 1 #" "
0 0 14 3 4 #"swap"
0 0 22 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 9 #"subs-help"
0 0 22 3 1 #" "
0 0 14 3 4 #"look"
0 0 22 3 1 #" "
0 0 14 3 4 #"swap"
0 0 22 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"t-var"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 4 #"look"
0 0 22 3 1 #" "
0 0 14 3 5 #"const"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 14 3 4 #"swap"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 14 3 5 #"const"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"replace*"
0 0 22 3 1 #" "
0 0 14 3 3 #"old"
0 0 22 3 1 #" "
0 0 14 3 3 #"new"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 2 #") "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 2 #" ("
0 0 14 3 7 #"eqc-lhs"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 2 #" ("
0 0 14 3 7 #"eqc-rhs"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-lhs"
0 0 22 3 2 #" ("
0 0 14 3 9 #"subs-help"
0 0 22 3 1 #" "
0 0 14 3 3 #"old"
0 0 22 3 1 #" "
0 0 14 3 3 #"new"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-rhs"
0 0 22 3 2 #" ("
0 0 14 3 9 #"subs-help"
0 0 22 3 1 #" "
0 0 14 3 3 #"old"
0 0 22 3 1 #" "
0 0 14 3 3 #"new"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-lhs"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-rhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 8 #"replace*"
0 0 22 3 1 #" "
0 0 14 3 3 #"old"
0 0 22 3 1 #" "
0 0 14 3 3 #"new"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 7 #"))))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";;CONTRACT (unify loc) \342\206\222 (listof Constraint?)"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";loc : (listof Constraint?)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 59
#";;PURPOSE Implements the unification algorithm from class. "
0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";The list of constraints that is returned should only have t-vars on"
 #" the left."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";DEFINITION"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"unify"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 9 #"new-unify"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"new-unify"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-loc"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 14 3 7 #"new-loc"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"curConst"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 2 #" ("
0 0 14 3 7 #"eqc-lhs"
0 0 22 3 1 #" "
0 0 14 3 8 #"curConst"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 2 #" ("
0 0 14 3 7 #"eqc-rhs"
0 0 22 3 1 #" "
0 0 14 3 8 #"curConst"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-num?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 6 #"t-num?"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"new-unify"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 2 #") "
0 0 14 3 7 #"new-loc"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-bool?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 7 #"t-bool?"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"new-unify"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 2 #") "
0 0 14 3 7 #"new-loc"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 7 #"t-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"new-unify"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 11 #"t-list-elem"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 3 #") ("
0 0 14 3 11 #"t-list-elem"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 14 3 7 #"new-loc"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-var?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 6 #"t-var?"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 3 #") ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"new-unify"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 2 #") "
0 0 14 3 7 #"new-loc"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"         [("
0 0 14 3 6 #"t-var?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"new-unify"
0 0 22 3 2 #" ("
0 0 14 3 7 #"replace"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 8 #"curConst"
0 0 22 3 2 #" ("
0 0 14 3 7 #"replace"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-loc"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"         [("
0 0 14 3 6 #"t-var?"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"new-unify"
0 0 22 3 2 #" ("
0 0 14 3 7 #"replace"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 3 #") ("
0 0 14 3 7 #"replace"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-loc"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-fun?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 6 #"t-fun?"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"new-unify"
0 0 22 3 2 #" ("
0 0 14 3 6 #"append"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 9 #"t-fun-arg"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 3 #") ("
0 0 14 3 9 #"t-fun-arg"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 12 #"t-fun-result"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 3 #") ("
0 0 14 3 12 #"t-fun-result"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"loc"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 14 3 7 #"new-loc"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"unify"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                 "
0 0 19 3 46 #"\"Insufficient parameters for typing ~e and ~e\""
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 22 3 7 #")]))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";-------------TESTS-----------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 2 #"'0"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;BINUMOP-----------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #"; ------------ add ------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"lhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 33 #"; ------------ minus ------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"lhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 36 #"; ------------ multiply ------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"lhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"rhs1"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #"; ------------iszero---------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"iszero-exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"lhs"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"rhs"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";------------ bif ----------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"bif-else480310"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"bif-then480309"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"bif-test480308"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"bif-then480309"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"bif-then480309"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"bif-else480310"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"bif-test480308"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";------------ with--------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"lhs482280"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"with-body482279"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"x482277"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"lhs482280"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"with-bbody482278"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"x482277"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"with-bbody482278"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"with-body482279"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";------------ rec -----------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 2 #" ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 15 3 3 #"rec"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"should look like this\\n\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"lhs484692"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 19 #"rec-with-body484691"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"x484689"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"lhs484692"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 20 #"rec-with-bbody484690"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"x484689"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 20 #"rec-with-bbody484690"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eqc"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 19 #"rec-with-body484691"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-------------         /Unify        -----------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-----------------  Type Inferer  --------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"find-type"
0 0 22 3 1 #" "
0 0 14 3 11 #"list-o-cons"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 11 #"list-o-cons"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"infer-type"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"Start"
0 0 19 3 25 #" expression disappeared!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-var?"
0 0 22 3 2 #" ("
0 0 14 3 7 #"eqc-lhs"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 11 #"list-o-cons"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 7 #"t-var-v"
0 0 22 3 2 #" ("
0 0 14 3 7 #"eqc-lhs"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 11 #"list-o-cons"
0 0 22 3 4 #"))) "
0 0 14 3 2 #"id"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 7 #"eqc-rhs"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 11 #"list-o-cons"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 9 #"find-type"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 11 #"list-o-cons"
0 0 22 3 2 #") "
0 0 14 3 2 #"id"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";;CONTRACT (infer-type e) \342\206\222 Type?"
0 0 22 29 1 #"\n"
0 0 17 3 10 #";e : Expr?"
0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";;PURPOSE This should alpha-vary e, generate-constraints on it, run "
 #"the unify "
) 0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";algorithm, and finally extract the type from the substitution retur"
 #"ned by unify"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";;DEFINITION"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 19 #"list-of-constraints"
0 0 22 3 2 #" ("
0 0 14 3 5 #"unify"
0 0 22 3 2 #" ("
0 0 14 3 20 #"generate-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 60
#"                                                           ("
0 0 14 3 10 #"alpha-vary"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 9 #"find-type"
0 0 22 3 1 #" "
0 0 14 3 19 #"list-of-constraints"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"start"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;----------------  /Type Inferer  --------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-----------------    TESTS     ----------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 2 #"'4"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 4 #")) ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";-------------- bin-num-op ----------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #"))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #"))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #"))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 29 #";  ---------- bif -----------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")) "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 20 3 2 #"23"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";  ---------- id ----------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #") "
0 0 14 3 1 #"x"
0 0 22 3 5 #"))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #") "
0 0 14 3 1 #"y"
0 0 22 3 4 #"))) "
0 0 19 3 12 #"\"Unbound-Id\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 27 #"; ----------with ----------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";------------ rec ------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 15 3 3 #"rec"
0 0 22 3 2 #" ("
0 0 14 3 3 #"len"
0 0 22 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 42 #"                                         ("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 7 #"tempty?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 46 #"                                              "
0 0 20 3 1 #"0"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                              ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 3 #"len"
0 0 22 3 2 #" ("
0 0 14 3 5 #"trest"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 3 #"len"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 15 3 3 #"rec"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 15 3 3 #"rec"
0 0 22 3 2 #" ("
0 0 14 3 5 #"goody"
0 0 22 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                               ("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 7 #"tempty?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 52 #"                                                    "
0 0 20 3 1 #"0"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 5 #"goody"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 14 3 5 #"goody"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #"; ---------- iszero ----------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 25 #"; --------  fun  --------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-bool"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"y"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"z"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-bool"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 32 #"; -----------  app   -----------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")) "
0 0 20 3 1 #"4"
0 0 22 3 4 #")))("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")) "
0 0 20 3 1 #"3"
0 0 22 3 4 #")))("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")) "
0 0 14 3 4 #"true"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";  ------------ tempty  ------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"test/pred"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tempty"
0 0 22 3 4 #")) ("
0 0 14 3 6 #"type=?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 7 #"tempty?"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 35 #"; ------------ tempty? ------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 7 #"tempty?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 7 #"tempty?"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 33 #"; ------------ tcons ------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 5 #"tcons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"y"
0 0 22 3 3 #") ("
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")) "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                             "
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";  ------------ tfirst------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"tfirst"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"test/pred"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"tfirst"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 6 #"type=?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"tempty-list-type"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"tfirst"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";  ------------ trest ------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"trest"
0 0 22 3 2 #" ("
0 0 14 3 5 #"tcons"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"test/pred"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"trest"
0 0 22 3 1 #" "
0 0 14 3 6 #"tempty"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 6 #"type=?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"t-list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-var"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"trest-list-type"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"trest"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 36 #"\"Insufficient parameters for typing\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"add1-fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"test/pred"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 14 3 8 #"add1-fun"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 6 #"type=?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"test/pred"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 8 #"add1-fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #"))) ("
0 0 14 3 6 #"type=?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 10 #"infer-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 8 #"add1-fun"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 4 #"))) "
0 0 19 3 7 #"\"unify\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;-----------------   /TESTS     ----------------------"
0           0
