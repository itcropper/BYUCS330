#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 2491 0 26 3 10 #"#lang plai"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 22 3 1 #" "
0 0 14 3 4 #"Expr"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 3 #"num"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 2 #"id"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 4 #"bool"
0 0 22 3 2 #" ("
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 10 #"bin-num-op"
0 0 22 3 2 #" ("
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 10 #"procedure?"
0 0 22 3 3 #") ("
0 0 14 3 3 #"lhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 3 #"bif"
0 0 22 3 2 #" ("
0 0 14 3 4 #"test"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"then"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 3 #") ("
0 0 14 3 10 #"bound-body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 6 #"arg-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 8 #"arg-type"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 3 #") ("
0 0 14 3 11 #"result-type"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 8 #"fun-expr"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 8 #"arg-expr"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 6 #"nempty"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"ncons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 6 #"nfirst"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"nrest"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 8 #"isnempty"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 5 #"Expr?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 22 3 1 #" "
0 0 14 3 4 #"Type"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"t-num"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 6 #"t-bool"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 7 #"t-nlist"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 3 #") ("
0 0 14 3 6 #"result"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";;procedure"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";;(parse sexp) \342\206\222 Expr?"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";;  sexp : s-expression?"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 69
(
 #";returns true or false based on if sexp is a valid expression or not"
 #"."
) 0 0 22 29 1 #"\n"
0 0 17 3 30 #"; parse : s-expression -> Expr"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"bad-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"t-bool"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                       "
0 0 20 3 1 #"'"
0 0 14 3 7 #"t-nlist"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"t-num"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"t-fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"app"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                       "
0 0 20 3 1 #"'"
0 0 14 3 4 #"with"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"nempty"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bif"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                       "
0 0 20 3 1 #"'"
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"ncons"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"nfirst"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                       "
0 0 20 3 1 #"'"
0 0 14 3 5 #"nrest"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                       "
0 0 20 3 1 #"'"
0 0 14 3 10 #"bin-num-op"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"isnempty"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"nempty?"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                       ))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"op-table"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"-"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        )"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 54
#";CONTRACT:(lookup-op op) \342\206\222 (or/c procedure? false/c)"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";  op : symbol?"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 33 #";PURPOSE:extracts the definition "
0 0 22 29 1 #"\n"
0 0 17 3 24 #";of an operator or false"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";DEFINITION"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"lookup-op"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 1 #"("
0 0 14 3 5 #"assoc"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 8 #"op-table"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 6 #"second"
0 0 22 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 8 #"op-table"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"parse-type"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"number"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"nlist"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 3 #") ("
0 0 14 3 7 #"t-nlist"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #") "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"->"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 10 #"parse-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 10 #"parse-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 15 #"\"Invalid token\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    )"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 7 #";number"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #") ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 3 #";id"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"member"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #" "
0 0 14 3 8 #"bad-list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 8 #";boolean"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #")] "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 7 #";nempty"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"nempty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 6 #"nempty"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 5 #"list?"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 7 #";iszero"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 6 #"iszero"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 5 #";with"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"with"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 5 #"list?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"member"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 14 3 8 #"bad-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 5 #";;bif"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bif"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"4"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 4 #";fun"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 5 #"list?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"member"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 14 3 8 #"bad-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 1 #":"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #":"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 3 #"fun"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 10 #"parse-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 10 #"parse-type"
0 0 22 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"fifth"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 6 #";ncons"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 5 #"ncons"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"ncons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 7 #";nempty"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 7 #"nempty?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 8 #"isnempty"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 7 #";nfirst"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 6 #"nfirst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 6 #"nfirst"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 6 #";nrest"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 5 #"nrest"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"nrest"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 3 #"id?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"id"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 4 #";app"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 3 #"app"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"               [("
0 0 14 3 9 #"lookup-op"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 10 #"bin-num-op"
0 0 22 3 2 #" ("
0 0 14 3 9 #"lookup-op"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 6 #"second"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 5 #"parse"
0 0 22 3 2 #" ("
0 0 14 3 5 #"third"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 21 #"\"unrecognized symbol\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               )"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       )"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    )"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 22 3 1 #" "
0 0 14 3 8 #"Type-Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 5 #"mtenv"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ["
0 0 14 3 4 #"nenv"
0 0 22 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 10 #"bound-type"
0 0 22 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 8 #"type-env"
0 0 22 3 1 #" "
0 0 14 3 9 #"Type-Env?"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 23 #";;(type-of e) \342\206\222 Type?"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";;e : Expr?"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 22 3 2 #" ("
0 0 14 3 5 #"mtenv"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"look-up-type"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 8 #"Type-Env"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"mtenv"
0 0 22 3 5 #" () ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 26 #"\"No matching value in env\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"nenv"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 3 #") ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 14 3 1 #"j"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 12 #"look-up-type"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    )"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";(type-of (parse sexp)) "
0 0 22 29 1 #"\n"
0 0 17 3 23 #"; returns  a valid type"
0 0 22 29 1 #"\n"
0 0 17 3 24 #"; type-of : Expr -> Type"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"Expr"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"num"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #")]"
0 0 17 3 6 #";check"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 2 #"id"
0 0 22 3 3 #"  ("
0 0 14 3 1 #"n"
0 0 22 3 3 #") ("
0 0 14 3 12 #"look-up-type"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #")]"
0 0 17 3 6 #";check"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"bool"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #")]"
0 0 17 3 6 #";check"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"bin-num-op"
0 0 22 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #") ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #") ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 5 #"t-num"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 40 #"\"Cannot apply binop to invalid operands\""
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"iszero"
0 0 22 3 3 #"  ("
0 0 14 3 1 #"n"
0 0 22 3 3 #") ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 6 #"t-bool"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"iszero expects a number\""
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"bif"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 22 3 1 #" "
0 0 14 3 4 #"then"
0 0 22 3 1 #" "
0 0 14 3 4 #"else"
0 0 22 3 3 #") ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 4 #"test"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 4 #"then"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 4 #"then"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 29 #"\"unmatching type of branches\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 31 #"\"bif condition is not a t-bool\""
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"with"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 3 #") ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 2 #" ("
0 0 14 3 4 #"nenv"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 2 #" ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"fun"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 5 #"ptype"
0 0 22 3 1 #" "
0 0 14 3 5 #"ftype"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 3 #") ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 2 #" ("
0 0 14 3 4 #"nenv"
0 0 22 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 5 #"ptype"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                     "
0 0 14 3 5 #"ftype"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ("
0 0 14 3 5 #"t-fun"
0 0 22 3 1 #" "
0 0 14 3 5 #"ptype"
0 0 22 3 1 #" "
0 0 14 3 5 #"ftype"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 42 #"\"fun body does not evaluate to given type\""
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"app"
0 0 22 3 3 #"  ("
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"Type"
0 0 22 3 2 #" ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 2 #"in"
0 0 22 3 1 #" "
0 0 14 3 3 #"out"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 14 3 2 #"in"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 3 #"out"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 16 #"\"not a function\""
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 16 #"\"not a function\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"nempty"
0 0 22 3 5 #" () ("
0 0 14 3 7 #"t-nlist"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"ncons"
0 0 22 3 3 #"  ("
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #") ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 7 #"t-nlist"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"not a real nlist\""
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"nfirst"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 3 #") ("
0 0 14 3 8 #"type-of*"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"nrest"
0 0 22 3 3 #"  ("
0 0 14 3 1 #"n"
0 0 22 3 3 #") ("
0 0 14 3 7 #"t-nlist"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"isnempty"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 3 #") ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    )"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";  [num (l r) (and (equal? (type-of l) 't-num)"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";                 (equal? (type-of r) )]"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";(type-of (parse '{+ 1 2}))"
0 0 22 29 1 #"\n"
0 0 17 3 8 #";(t-num)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 25 #";(type-of (parse '{3 4}))"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";(error 'type-of \"Number is not a function\")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 19 #";;dont worry about:"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";(nfirst nempty)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";;NUMS---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 22 #";;BOOLS---------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 7 #"      ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 4 #")) ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 7 #"      ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 4 #")) ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #")) "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;BINOPS----------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 5 #"))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 5 #"))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 5 #"))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #" ( "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 6 #")))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #" ( "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 5 #")))) "
0 0 19 3 40 #"\"Cannot apply binop to invalid operands\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 3 #"fun"
0 0 22 3 3 #" ( "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 5 #")))) "
0 0 19 3 16 #"\"Illegal syntax\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))) "
0 0 19 3 26 #"\"No matching value in env\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))) "
0 0 19 3 26 #"\"No matching value in env\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";;ISZERO-----------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 5 #"))) ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 5 #"))) ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 6 #")))) ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 4 #"))) "
0 0 19 3 25 #"\"iszero expects a number\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"iszero"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))) "
0 0 19 3 26 #"\"No matching value in env\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";;BIF--------------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 6 #")))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 5 #"))) ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 5 #")))) "
0 0 19 3 31 #"\"bif condition is not a t-bool\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 5 #")))) "
0 0 19 3 29 #"\"unmatching type of branches\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";;WITH-------------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 6 #")))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 2 #") "
0 0 14 3 1 #"x"
0 0 22 3 5 #"))) ("
0 0 14 3 6 #"t-bool"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 3 #"bif"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 6 #")) ) ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 6 #")))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 5 #"))) ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 6 #")))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 5 #")))) "
0 0 19 3 40 #"\"Cannot apply binop to invalid operands\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;FUN-------------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 2 #") "
0 0 14 3 1 #":"
0 0 22 3 2 #"  "
0 0 14 3 6 #"number"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 6 #")))) ("
0 0 14 3 5 #"t-fun"
0 0 22 3 2 #" ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #") ("
0 0 14 3 5 #"t-num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 17 3 88
(
 #";(test (type-of (parse '(with (x (fun (y : number) :  number (+ y y)"
 #")) (x 4)))) (t-num))"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;APP-------------------------"
0 0 22 29 1 #"\n"
0 0 17 3 50 #";(parse '((fun (y : number) :  number (+ y y)) 4))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";;NCONS------------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"ncons"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 5 #"))) ("
0 0 14 3 7 #"t-nlist"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"ncons"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 4 #"))) "
0 0 19 3 18 #"\"not a real nlist\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";;NEMPTY--------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"nempty"
0 0 22 3 4 #")) ("
0 0 14 3 7 #"t-nlist"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;NFIRST----------------------"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 22 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"nfirst"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 6 #")))) ("
0 0 14 3 5 #"t-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0           0
