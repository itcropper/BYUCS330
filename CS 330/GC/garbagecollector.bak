#lang plai/collector

(define heap-ptr  'uninitialized-heap-ptr)
(define half-heap 0)
(define in-first-half true)

(define (init-allocator)
  (begin (set! half-heap (floor (/ (heap-size) 2))))
  (set! heap-ptr 0))

(define (cant-allocate-prim)
  (if in-first-half
     (> (+ heap-ptr 2) half-heap)
     (> (+ heap-ptr 2) half-heap)
     )
  )


(define (gc:alloc-flat p)
  (begin
    (when (cant-allocate-prim)
    (error 'gc:alloc-flat "out of memory"))
  (heap-set! heap-ptr 'prim)
  (heap-set! (+ 1 heap-ptr) p)
  (set! heap-ptr (+ 2 heap-ptr))
  (- heap-ptr 2)))

(define (gc:cons f r)
  (begin
    (when (> (+ heap-ptr 3) (heap-size))
      (error 'gc:cons "out of memory"))
    (heap-set! heap-ptr 'cons)
    (heap-set! (+ 1 heap-ptr) f)
    (heap-set! (+ 2 heap-ptr) r)
    (set! heap-ptr (+ 3 heap-ptr))
    (- heap-ptr 3)))

(define (gc:cons? a)
  (eq? (heap-ref a) 'cons))

(define (gc:first a)
  (heap-ref (+ 1 a)))

(define (gc:rest a)
  (heap-ref (+ 2 a)))

(define (gc:set-first! a f)
  (if (gc:cons? a)
      (heap-set! (+ 1 a) f)
      (error 'set-first! "expects address of cons")))

(define (gc:set-rest! a r)
  (heap-set! (+ 2 a) r))

(define (gc:flat? a)
  (eq? (heap-ref a) 'prim))

(define (gc:deref a)
  (heap-ref (+ 1 a)))


;;Provided Functions

;(heap-value? v) → boolean?
;  v : any/c

;(location? v) → boolean?
;  v : any/c

;(heap-size) → number?

;(heap-set! addr v) → void
;  addr : location?
;  v : heap-value?

;(heap-ref addr) → heap-value?
; addr : location?

;(root? v) → boolean?
;  v : any/c

;(get-root-set root-identifier ...)
;  	root-identifier	 :  identifier?

;(read-root r) → location?
;   r : root?

;(set-root! r a) → void
;  r : root?
;  a : location?

;(procedure-roots proc) → (listof root?)
;  proc : procedure?

;(allocator-setup collector-file heap-size)
;  collector-file:	 	string?
;  heap-size     :	 	number?